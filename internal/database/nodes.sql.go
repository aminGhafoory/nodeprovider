// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: nodes.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createNode = `-- name: CreateNode :one
INSERT INTO nodes(
    nodeID ,
    nodeURL ,
    chain_ID ,
    chain_name,
    last_fetched_at ,
    created_at ,
    updated_at 
)VALUES(
    $1,$2,$3,$4,$5,$6,$7
)
RETURNING nodeid, nodeurl, chain_id, chain_name, last_fetched_at, created_at, updated_at
`

type CreateNodeParams struct {
	Nodeid        uuid.UUID
	Nodeurl       string
	ChainID       string
	ChainName     sql.NullString
	LastFetchedAt sql.NullTime
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) (Node, error) {
	row := q.db.QueryRowContext(ctx, createNode,
		arg.Nodeid,
		arg.Nodeurl,
		arg.ChainID,
		arg.ChainName,
		arg.LastFetchedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Node
	err := row.Scan(
		&i.Nodeid,
		&i.Nodeurl,
		&i.ChainID,
		&i.ChainName,
		&i.LastFetchedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBestList = `-- name: GetBestList :many
SELECT 
    nodes.nodeID,
    nodeURL,
    chain_ID,
    chain_name,
    avg(responsetime) as avg_responsetime,
	sum(case successful when true then 1 else 0 end) as successful_count,
	sum(case successful when false then 1 else 0 end) as failure_count
FROM
    nodes JOIN requests ON nodes.nodeID = requests.nodeID
where 
	chain_ID = $1  
GROUP BY 
	nodes.nodeID
ORDER BY 
	avg_responsetime ASC
`

type GetBestListRow struct {
	Nodeid          uuid.UUID
	Nodeurl         string
	ChainID         string
	ChainName       sql.NullString
	AvgResponsetime float64
	SuccessfulCount int64
	FailureCount    int64
}

func (q *Queries) GetBestList(ctx context.Context, chainID string) ([]GetBestListRow, error) {
	rows, err := q.db.QueryContext(ctx, getBestList, chainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBestListRow
	for rows.Next() {
		var i GetBestListRow
		if err := rows.Scan(
			&i.Nodeid,
			&i.Nodeurl,
			&i.ChainID,
			&i.ChainName,
			&i.AvgResponsetime,
			&i.SuccessfulCount,
			&i.FailureCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
